<?php
namespace App\Controller;

use App\Controller\AppController;

/**
 * Tasks Controller
 *
 * @property \App\Model\Table\TasksTable $Tasks
 *
 * @method \App\Model\Entity\Task[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class TasksController extends AppController
{

    public function initialize()
    {

        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Tasks->HawkFiles->setUser($this->Auth->user());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['HawkFiles', 'Owners']
        ];
        $tasks = $this->paginate($this->Tasks);

        $this->set(compact('tasks'));
    }

    /**
     * View method
     *
     * @param string|null $id Task id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $task = $this->Tasks->get($id, [
            'contain' => ['HawkFiles', 'Owners', 'Users']
        ]);

        $this->set('task', $task);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($fileId)
    {
        $hawkFile = $this->Tasks->HawkFiles->find()->where(['id' => $fileId])->first()->id;
        if (empty($hawkFile)) {
            $this->Flash->error(__('Δεν βρέθηκε το αρχείο για τη δημιουργία εργασίας'));
            return $this->redirect(['controller' => 'HawkFiles','action' => 'index']);
        }
        $task = $this->Tasks->newEntity();
        if ($this->getRequest()->is('post')) {
            $task = $this->Tasks->patchEntity($task, $this->getRequest()->getData());
            if ($this->Tasks->save($task)) {
                $this->Flash->success(__('Η εργασία προσθέθηκε'));
                return $this->redirect(['controller' => 'HawkFiles', 'action' => 'index']);
            }
            $this->Flash->error(__('Δεν καταφέραμε να προσθέσουμε την εργασία'));
        }
        $users = $this->Tasks->Users
            ->find('list')
            ->matching('HawkUsers')->where(['HawkUsers.hawk_file_id' => $hawkFile]);
        $owner = $this->Auth->user()['id'];
        $this->set(compact('task', 'users', 'owner', 'hawkFile'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Task id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $task = $this->Tasks->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $task = $this->Tasks->patchEntity($task, $this->request->getData());
            if ($this->Tasks->save($task)) {
                $this->Flash->success(__('The task has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The task could not be saved. Please, try again.'));
        }
        $hawkFiles = $this->Tasks->HawkFiles->find('list', ['limit' => 200]);
        $owners = $this->Tasks->Owners->find('list', ['limit' => 200]);
        $this->set(compact('task', 'hawkFiles', 'owners'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Task id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $task = $this->Tasks->get($id);
        if ($this->Tasks->delete($task)) {
            $this->Flash->success(__('The task has been deleted.'));
        } else {
            $this->Flash->error(__('The task could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
