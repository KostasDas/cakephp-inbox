<?php
namespace App\Controller;

use App\Controller\Helpers\HawkFolder;
use Cake\Filesystem\File;
use Cake\Utility\Hash;

/**
 * HawkFiles Controller
 *
 * @property \App\Model\Table\HawkFilesTable $HawkFiles
 *
 * @method \App\Model\Entity\HawkFile[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class HawkFilesController extends ApiController
{
    public function initialize()
    {


        parent::initialize(); // TODO: Change the autogenerated stub
        $this->HawkFiles->setUser($this->Auth->user());
    }

    /**
     *
     */
    public function index()
    {
        $files = $this->HawkFiles->find('search', ['search' => $this->getRequest()->getQueryParams()])
            ->contain(['Users'])
            ->order(['HawkFiles.created' => 'DESC']);

        $this->set(compact('files'));
        $this->set('authUser', $this->Auth->user());
    }

    /**
     * @param null $file_id
     *
     **/
    public function view($file_id = null)
    {
        if (!$this->isAuthorized($this->Auth->user())) {
            $this->Flash->error('Δεν εχετε δικαιωμα να δειτε αυτο το αρχείο');
            return $this->redirect(['index']);
        }
        $hawkFile = $this->HawkFiles->HawkUsers->find()->where([
            'hawk_file_id' => $file_id,
        ])->first();
        return $this->getResponse()->withFile($hawkFile->location);
    }

    /**
     * @param $user
     *
     * @return bool
     */
    public function isAuthorized($user)
    {
        if (in_array($this->getRequest()->getParam('action'), ['view'])) {
            $file_id = (int)$this->getRequest()->getParam('pass.0');
            if ($this->HawkFiles->isOwnedBy($file_id, $user['id'])) {
                return true;
            }
        }
        return parent::isAuthorized($user);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        if (!$this->isAuthorized($this->Auth->user())) {
            $this->Flash->error(__('Μόνο οι administrator εχουν δικαιωμα να προσθέτουν αρχεία'));
            return $this->redirect(['action' => 'index']);
        }
        $hawkFile = $this->HawkFiles->newEntity();
        if ($this->getRequest()->is('post')) {
            $filesSaved = false;
            $data = $this->getRequest()->getData();
            $hawkFile = $this->HawkFiles->newEntity($data);
            if ($this->HawkFiles->save($hawkFile)) {
                $filesSaved = $this->saveHawkFile($data, $hawkFile);
            }
            if ($filesSaved) {
                $this->Flash->success(__('Το αρχείο αποθηκεύτηκε με επιτυχία'));
                return $this->redirect(['action' => 'index']);
            }
            $this->HawkFiles->delete($hawkFile);
            $this->Flash->error(__('Δεν καταφέραμε να αποθηκεύσουμε το αρχείο. Παρακαλώ προσπαθήστε ξανά'));
        }
        $this->loadOptions();
        $this->set(compact('hawkFile'));
        $this->render('form');
    }

    private function saveHawkFile($data, $hawkFile)
    {
        $saved = false;
        $users = $data['user_id'];
        $toDeleteFiles = [];
        if ($this->getRequest()->getParam('action') === 'edit') {
            foreach ($hawkFile->hawk_users as $hawkUser) {
                if (!in_array($hawkUser->user_id, $users)) {
                    $toDeleteFiles[] = $hawkUser->location;
                    $this->HawkFiles->HawkUsers->delete($hawkUser);
                }
            }
        }
        foreach ($users as $userId) {
            $data['user_id'] = $userId;
            $hawkFolder = new HawkFolder();
            $hawkFolder->setPath($data);
            $data['location'] = $hawkFolder->moveToProduction($data['hawk_file']);
            $saved = $this->saveHawkUsers($hawkFile->id, $userId, $data['location']);
        }
        foreach ($toDeleteFiles as $url) {
            $file = new File($url);
            $file->delete();
        }

        return $saved;
    }

    private function saveHawkUsers($fileId, $userId, $location)
    {
        $entity = $this->HawkFiles->HawkUsers->find()
            ->where([
                'hawk_file_id' => $fileId,
                'user_id' => $userId,
            ])
            ->first();
        if (!empty($entity)) {
            $entity->location = $location;
            return $this->HawkFiles->HawkUsers->save($entity);
        }
        $entity = $this->HawkFiles->HawkUsers->newEntity([
            'user_id' => $userId,
            'hawk_file_id' => $fileId,
            'location' => $location
        ]);
        return $this->HawkFiles->HawkUsers->save($entity);
    }

    private function loadOptions()
    {
        $types = $this->HawkFiles->find('list', [
            'keyField'   => 'type',
            'valueField' => 'type',
        ])->distinct();
        $senders = $this->HawkFiles->find('list', [
            'keyField'   => 'sender',
            'valueField' => 'sender',
        ])->distinct();
        $users = $this->HawkFiles->Users->find('list', [
            'keyField'   => 'id',
            'valueField' => 'name',
        ]);

        $this->set(compact('types', 'senders', 'users'));

    }

    /**
     * Edit method
     *
     * @param string|null $id Hawk File id.
     *
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        if (!$this->isAuthorized($this->Auth->user())) {
            $this->Flash->error(__('Μόνο οι administrator εχουν δικαιωμα να επεξεργάζονται αρχεία'));
            return $this->redirect(['action' => 'index']);
        }
        $hawkFile = $this->HawkFiles->get($id, [
            'contain' => 'HawkUsers'
        ]);
        if ($this->getRequest()->is(['post', 'patch', 'put'])) {
            $hawkFile = $this->HawkFiles->patchEntity($hawkFile, $this->getRequest()->getData());
            if (!empty($hawkFile->getErrors())) {
                $this->Flash->error(__('Δεν καταφέραμε να αποθηκεύσουμε σωστά το αρχείο. Παρακαλώ προσπαθήστε ξανά'));
                return $this->redirect(['action' => 'index']);
            }
            $handled = $this->handleHawkUsersEdit($this->getRequest()->getData(), $hawkFile);
            if ($this->HawkFiles->save($hawkFile) && $handled) {
                $this->Flash->success(__('Το αρχείο αποθηκεύτηκε με επιτυχία'));
                return $this->redirect(['action' => 'index']);
            }
        }
        $this->loadOptions();
        $this->set('userIds', Hash::extract($hawkFile, 'hawk_users.{n}.user_id'));
        $this->set(compact('hawkFile'));
        $this->render('form');
    }

    private function handleHawkUsersEdit($data, $hawkFile)
    {
        if (empty($data['hawk_file']['tmp_name'])) {
            // if no new file and no new users
            if ($this->unchangedUsers($data['user_id'], $hawkFile->hawk_users)) {
                return true;
            }
            // if no new file but new users
            $file = new File($hawkFile->hawk_users[0]->location);
            $data['hawk_file']['tmp_name'] =  $file->path;
            $data['hawk_file']['name'] = $file->name;
            return $this->saveHawkFile($data, $hawkFile);
        }
        // if new file delete old ones users will be handled elsewhere
        foreach ($hawkFile->hawk_users as $entry) {
            $file = new File($entry->location);
            $file->delete();
        }

        return $this->saveHawkFile($data, $hawkFile);
    }

    private function unchangedUsers($users, $hawkUsers)
    {
        $hawkUsers = Hash::extract($hawkUsers, '{n}.id');
        sort($hawkUsers); sort($users);
        return ($hawkUsers == $users);
    }

    public function types()
    {
        $types = $this->HawkFiles->find()
            ->select(['type'])
            ->order(['type' => 'ASC'])
            ->distinct()
            ->toArray();

        $this->set('types', $types);
    }

    public function senders()
    {
        $senders = $this->HawkFiles->find()
            ->select(['sender'])
            ->order(['sender' => 'ASC'])
            ->distinct()
            ->toArray();

        $this->set('senders', $senders);
    }

    public function download($file_id)
    {
        $hawkFile = $this->HawkFiles->HawkUsers->find()->where([
            'hawk_file_id' => $file_id,
        ])->first();
        return $this->getResponse()->withFile($hawkFile->location, [
            'download' => true,
        ]);
    }
}
